- name: Clone git repo for {{ item }}  # noqa: latest
  ansible.builtin.git:
    repo: 'https://aur.archlinux.org/{{ item }}.git'
    dest: '/home/aur_builder/{{ item }}'
  retries: 5
  become: true
  become_user: aur_builder

- name: Receive GPG keys
  ansible.builtin.command: >
    /home/aur_builder/recv_gpg_keys.sh /home/aur_builder/{{ item }}
  become: true
  become_user: aur_builder
  register: gpg_out
  retries: 5
  changed_when: gpg_out.rc == 0

- name: Find package files in repo for {{ item }}
  ansible.builtin.find:
    path: '/home/aur_builder/{{ item }}'
    patterns:
      - '{{ "*" + makepkg_ext.stdout }}'
      - '{{ "*" + makepkg_ext.stdout + ".sig" }}'
  register: git_files

- name: Delete package files
  ansible.builtin.file:
    path: '{{ file_item }}'
    state: absent
  loop: '{{ git_files.files }}'
  loop_control:
    loop_var: file_item

- name: Build {{ item }}
  ansible.builtin.shell: >
    makepkg -s -C --noconfirm{% if item == 'systemd-selinux' %} --nocheck{% endif %}
  args:
    chdir: '/home/aur_builder/{{ item }}'
    creates: '/home/aur_builder/{{ item + "/*" + makepkg_ext.stdout }}'
  become: true
  retries: 3
  become_user: aur_builder

- name: Install {{ item + '/' + pkg_item|basename }}
  ansible.builtin.command: >
    pacman -U --ask=4 {{ pkg_item }}
  register: pacman_out
  loop: '{{ q("ansible.builtin.fileglob", "/home/aur_builder/" + item + "/*" + makepkg_ext.stdout) }}'
  loop_control:
    loop_var: pkg_item
  changed_when: pacman_out.rc == 0

- name: Clean up build files for {{ item }}
  ansible.builtin.file:
    path: /home/aur_builder/{{ item }}
    state: absent
