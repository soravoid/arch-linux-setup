- name: Download python-pexpect
  community.general.pacman:
    name: python-pexpect
    state: present

- name: Download SELinux packages
  block:
    - name: Get makepkg compression extension
      ansible.builtin.command: bash -c 'source /etc/makepkg.conf; echo "$PKGEXT"'
      register: makepkg_ext
      changed_when: false
    - name: Download SELinux packages (1/5)
      kewlfft.aur.aur:
        name:
          - libsepol
          - libselinux
          - checkpolicy
          - secilc
          - setools
          - libsemanage
          - semodule-utils
          - policycoreutils
          - selinux-python
          - mcstrans
          - restorecond
        aur_only: true
        state: present
        use: paru
      become: true
      become_user: aur_builder
    - name: Download SELinux packages (2/5)
      ansible.builtin.include_tasks: install_pkgconflict.yml
      loop:
        - pambase-selinux
        - pam-selinux
    - name: Download SELinux packages (3/5)
      ansible.builtin.include_tasks: install_pkgconflict.yml
      loop:
        - coreutils-selinux
        - findutils-selinux
        - iproute2-selinux
        - logrotate-selinux
        - openssh-selinux
        - psmisc-selinux
        - shadow-selinux
        - cronie-selinux
    - name: Download SELinux packages (4/5)
      block:
        - name: Check if sudoers file exists
          ansible.builtin.stat:
            path: /etc/sudoers
            get_attributes: false
            get_checksum: false
            get_mime: false
          register: sudoers
        - name: Backup sudoers file
          ansible.builtin.copy:
            src: /etc/sudoers
            dest: /etc/sudoers.pacsave
            mode: preserve
          when: sudoers.stat.exists
        - name: Clone sudo-selinux repo  # noqa: latest
          ansible.builtin.git:
            repo: https://aur.archlinux.org/sudo-selinux.git
            dest: /home/aur_builder/sudo-selinux
          become: true
          become_user: aur_builder
        - name: Build sudo-selinux
          ansible.builtin.command: makepkg -s -C --noconfirm
          args:
            chdir: /home/aur_builder/sudo-selinux
            creates: '{{ "/home/aur_builder/sudo-selinux/sudo-selinux*" + makepkg_ext.stdout }}'
          become: true
          become_user: aur_builder
        - name: Find sudo-selinux package
          ansible.builtin.find:
            patterns: '{{ "sudo-selinux-*" + makepkg_ext.stdout }}'
            file_type: file
            paths: ["/home/aur_builder/sudo-selinux"]
            use_regex: false
          register: selinux_exec
        - name: Install sudo-selinux
          ansible.builtin.command: pacman -U {{ lookup('ansible.builtin.fileglob', '/home/aur_builder/sudo-selinux*' + makepkg_ext.stdout) | first }}
          register: pacman_out
          changed_when: pacman_out.rc == 0
        - name: Change default sudoers file with previous sudoers
          when: sudoers.stat.exists
          ansible.builtin.command: mv /etc/sudoers.pacsave /etc/sudoers
          args:
            creates: /etc/sudoers
            removes: /etc/sudoers.pacsave
        - name: Delete sudo-selinux folder
          ansible.builtin.file:
            path: /home/aur_builder/sudo-selinux
            state: absent
    - name: Download SELinux packages (5/5)
      ansible.builtin.include_tasks: install_pkgconflict.yml
      loop:
        - util-linux-selinux
        - systemd-selinux
        - util-linux-selinux
        - systemd-selinux
        - dbus-linux
        - selinux-alpm-hook

- name: Remove python-pexpect
  community.general.pacman:
    name: python-pexpect
    state: absent

- name: Change lsm kernel parameter
  ansible.builtin.lineinfile:
    path: assets/boot_hardening.conf
    line: lsm=landlock,lockdown,yama,integrity,selinux,bpf

- name: Ensure proper login security context with PAM
  block:
    - name: Set close rule
      ansible.builtin.lineinfile:
        path: /etc/pam.d/system-login
        regexp: '(?m)session\s+required\s+pam_selinux\.so\s+close'
        line: 'session         required        pam_selinux.so close'
    - name: Set open rule
      ansible.builtin.lineinfile:
        path: /etc/pam.d/system-login
        regexp: '(?m)session\s+required\s+pam_selinux\.so\s+open'
        line: 'session         required        pam_selinux.so open'

- name: Download SELinux refpolicy
  kewlfft.aur.aur:
    name: selinux-refpolicy-src
    state: present
    use: paru
  become: true
  become_user: aur_builder

- name: Set SELinux policy
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: '(?m)^SELINUXTYPE='
    line: 'SELINUXTYPE=refpolicy'

- name: Make SELinux policy patch
  ansible.builtin.command: '{{ item.cmd }}'
  with_items:
    - cmd: 'checkmodule -m -o requiredmod.mod requiredmod.te'
      result_file: 'requiredmod.mod'
    - cmd: 'semodule_package -o requiredmod.pp -m requiredmod.mod'
      result_file: 'requiredmod.pp'
  args:
    chdir: assets
    creates: '{{ item.result_file }}'

- name: Install SELinux policy patch
  ansible.builtin.command: 'semodule -i requiredmod.pp'
  args:
    chdir: assets
  register: patch_out
  changed_when: patch_out.rc == 0

- name: Remind user to reboot and run command for SELinux
  ansible.builtin.debug:
    msg: 'After this playbook finishes, reboot and run `restorecon -r /` as root'
